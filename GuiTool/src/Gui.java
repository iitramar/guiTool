
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author iitramar
 */
public class Gui extends javax.swing.JFrame{

    /**
     * Creates new form Gui
     */
    Set<String> tiwariAlgo = new HashSet<String>();
    double fValue = Double.POSITIVE_INFINITY;
    String bestAlgo;
    public Gui() {
        initComponents();
        //architecture.setVisible(false);
        //mixingSpecs.setVisible(false);
        //algoClass.setVisible(false);
        //algorithms.setVisible(false);
        lblEx1.setVisible(false);
        lblEx2.setVisible(false);
        lblTarget.setVisible(false);
        lblPrecision.setVisible(false);
        txtEx1.setVisible(false);
        txtEx2.setVisible(false);
        txtTarget.setVisible(false);
        txtPrecision.setVisible(false);
        jScrollPane1.getColumnHeader().setVisible(false);
        jPanelStats.setVisible(false);
        zoomIn.setVisible(false);
        zoomOut.setVisible(false);
        algorithms1.setVisible(false);
        jLabel7.setVisible(false);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        for(int i=0;i<statTable.getColumnCount();i++){
            statTable.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
            statTable.getColumnModel().getColumn(i).setHeaderRenderer(centerRenderer);
        }
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        tiwariAlgo.add("DMRW"); tiwariAlgo.add("IDMA"); tiwariAlgo.add("Gorma"); tiwariAlgo.add("Minmix"); 
        tiwariAlgo.add("MTC"); tiwariAlgo.add("RMA");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInput = new javax.swing.JPanel();
        btnSubmit = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        objective = new javax.swing.JComboBox<>();
        architecture = new javax.swing.JComboBox<>();
        mixingSpecs = new javax.swing.JComboBox<>();
        algoClass = new javax.swing.JComboBox<>();
        algorithms = new javax.swing.JComboBox<>();
        lblEx1 = new javax.swing.JLabel();
        lblEx2 = new javax.swing.JLabel();
        lblTarget = new javax.swing.JLabel();
        lblPrecision = new javax.swing.JLabel();
        txtEx1 = new javax.swing.JTextField();
        txtEx2 = new javax.swing.JTextField();
        txtTarget = new javax.swing.JTextField();
        txtPrecision = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        algorithms1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jPanelStats = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        demoTable = new javax.swing.JTable();
        jPanelGraph = new javax.swing.JPanel();
        jPanelInfo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statTable = new javax.swing.JTable();
        btnBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        zoomIn = new javax.swing.JButton();
        zoomOut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Frame");
        setBackground(java.awt.Color.gray);
        setForeground(java.awt.Color.darkGray);

        jPanelInput.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Input"));
        jPanelInput.setToolTipText("Input Pane");
        jPanelInput.setAutoscrolls(true);

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.setPreferredSize(new java.awt.Dimension(65, 23));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        objective.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Demo", "Stats", "Comparison", "Best Algorithm" }));
        objective.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectiveActionPerformed(evt);
            }
        });

        architecture.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        architecture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                architectureActionPerformed(evt);
            }
        });

        mixingSpecs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        mixingSpecs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mixingSpecsActionPerformed(evt);
            }
        });

        algoClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        algoClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algoClassActionPerformed(evt);
            }
        });

        algorithms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        algorithms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmsActionPerformed(evt);
            }
        });

        lblEx1.setText("jLabel2");

        lblEx2.setText("jLabel3");

        lblTarget.setText("jLabel6");

        lblPrecision.setText("jLabel7");

        txtEx1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEx1ActionPerformed(evt);
            }
        });

        txtTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTargetActionPerformed(evt);
            }
        });

        txtPrecision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecisionActionPerformed(evt);
            }
        });

        jLabel1.setText("Objective");

        jLabel3.setText("Architecture");

        jLabel4.setText("Mixing Specifications");

        jLabel5.setText("Algorithm Class");

        jLabel6.setText("Algorithms");

        algorithms1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        algorithms1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithms1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Algorithms");

        javax.swing.GroupLayout jPanelInputLayout = new javax.swing.GroupLayout(jPanelInput);
        jPanelInput.setLayout(jPanelInputLayout);
        jPanelInputLayout.setHorizontalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addComponent(lblEx2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEx2))
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addComponent(lblEx1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEx1))
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addComponent(lblTarget)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTarget))
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addComponent(lblPrecision)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPrecision))
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(algorithms1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(objective, 0, 125, Short.MAX_VALUE)
                            .addComponent(mixingSpecs, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(algoClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(algorithms, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(architecture, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 45, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelInputLayout.setVerticalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(objective)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(architecture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mixingSpecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(algoClass)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(algorithms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(algorithms1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEx1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(lblEx1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEx2)
                    .addComponent(lblEx2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTarget)
                    .addComponent(txtTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPrecision, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPrecision))
                .addGap(18, 18, 18)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSubmit)
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addGap(3, 3, 3)))
                .addContainerGap())
        );

        jPanelStats.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Statistics"));

        demoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Reactant", null, null},
                {"Buffer", null, null},
                {"Waste", null, null},
                {"Operations", null, null}
            },
            new String [] {
                "", "Algorithm", "Algorithm 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        demoTable.setRowHeight(25);
        jScrollPane2.setViewportView(demoTable);

        javax.swing.GroupLayout jPanelStatsLayout = new javax.swing.GroupLayout(jPanelStats);
        jPanelStats.setLayout(jPanelStatsLayout);
        jPanelStatsLayout.setHorizontalGroup(
            jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelStatsLayout.setVerticalGroup(
            jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelGraph.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Output"));
        jPanelGraph.setLayout(new java.awt.BorderLayout());

        statTable.setAutoCreateRowSorter(true);
        statTable.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        statTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No", "Target", "Reactant", "Buffer", "Waste", "Operations", "MLB"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(statTable);

        javax.swing.GroupLayout jPanelInfoLayout = new javax.swing.GroupLayout(jPanelInfo);
        jPanelInfo.setLayout(jPanelInfoLayout);
        jPanelInfoLayout.setHorizontalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
        );
        jPanelInfoLayout.setVerticalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
        );

        jPanelGraph.add(jPanelInfo, java.awt.BorderLayout.CENTER);

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jLabel2.setText("Open Stats file");

        zoomIn.setBackground(new java.awt.Color(244, 197, 12));
        zoomIn.setText("ZOOM IN");
        zoomIn.setName("+"); // NOI18N
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInActionPerformed(evt);
            }
        });

        zoomOut.setBackground(new java.awt.Color(244, 197, 12));
        zoomOut.setText("ZOOM OUT");
        zoomOut.setName("-"); // NOI18N
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(378, 378, 378)
                .addComponent(zoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(486, 486, 486)
                .addComponent(zoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(zoomIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(zoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowse))
                    .addComponent(jPanelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanelStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addComponent(jPanelGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBrowse))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    BufferedImage image = null;
    JLabel lblImage = null;
    JLabel lblImage1 = null;
    int width = 470, height = 500 ;
    
    public void loadImage(String s, int count){
        width = (int)(0.75 * jPanelGraph.getWidth()) ;
        height = (int)(0.8 * jPanelGraph.getHeight()) ;
        if(algorithms.getSelectedItem().toString() == "Remia"){
            width = (int)(0.93 * jPanelGraph.getWidth()) ;
            height = (int)(0.8 * jPanelGraph.getHeight()) ;
        }
        
        jPanelInfo.setVisible(false);
        File f = null;
        try {
            System.out.println("Reading Image");
            f = new File(s);
            image = new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
            image = ImageIO.read(f);
            System.out.println("Done!");
        } catch (IOException e) {
            e.printStackTrace();
        }
        lblImage = new JLabel(new ImageIcon(image));
        lblImage.setSize(new Dimension(width,height));
        lblImage.setIcon(new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_SMOOTH)));
        lblImage.updateUI();
        String obj = objective.getSelectedItem().toString();
        if(obj == "Demo" || obj == "Best Algorithm"){
            jPanelGraph.add(lblImage, BorderLayout.CENTER);
            jPanelGraph.add(zoomIn, BorderLayout.NORTH);
            jPanelGraph.add(zoomOut, BorderLayout.SOUTH);
            zoomIn.setVisible(true);
            zoomOut.setVisible(true);
        }
        else if(obj == "Comparison"){
            width = (int)(0.47 * jPanelGraph.getWidth()) ;
            height = (int)(0.7 * jPanelGraph.getHeight()) ; 
            lblImage.setIcon(new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_SMOOTH)));
            lblImage.updateUI();
            if(count == 0){
                jPanelGraph.add(lblImage, BorderLayout.WEST);
            }
            else if(count == 1){
                jPanelGraph.add(lblImage, BorderLayout.EAST);
            }
        }
        jPanelGraph.revalidate();
    }
    
    public void loadStat(String fileName, int count) throws IOException{
        BufferedReader br = null;
        String obj = objective.getSelectedItem().toString();
        try {
            if(obj == "Demo" || obj == "Best Algorithm"){
                br = new BufferedReader(new FileReader("./stat/" + fileName + "/" + fileName + "_Demo.txt"));
            }
            else if(obj == "Comparison"){
                
                if(tiwariAlgo.contains(fileName)){
                    System.out.println("algo1 = " + fileName);
                    BufferedReader br1 = new BufferedReader(new FileReader("./stat/" + fileName + "/" + fileName + "_Demo.txt"));
                    BufferedReader br2 = new BufferedReader(new FileReader("./stat/Comparison/" + "Comparison.txt"));
                    String sCurrentLine;
                    String lastLine = "";
                    while ((sCurrentLine = br1.readLine()) != null) 
                    {
                        lastLine = sCurrentLine;
                    }
                    String lastLineComp = "";
                    String sCurrentLineComp;
                    while ((sCurrentLineComp = br2.readLine()) != null) 
                    {
                        lastLineComp = sCurrentLineComp;
                    }
                    String b[] = lastLineComp.split("\t");
                    String a[] = lastLine.split("\t");
                    int counter = Integer.parseInt(b[0]) + 1;
                    lastLineComp = Integer.toString(counter);
                    for(int i=1;i<a.length;i++){
                        lastLineComp += "\t" + a[i];
                    }
                    System.out.println("lastLineComp = " + lastLineComp);
                    FileWriter fw = new FileWriter("./stat/Comparison/" + "Comparison.txt",true);
                    fw.append(lastLineComp + "\n");
                    fw.close();
                    br2.close();
                    br1.close();
                }
                br = new BufferedReader(new FileReader("./stat/Comparison/" + "Comparison.txt"));
            }
            String lastLine = "";
            String sCurrentLine;
            while ((sCurrentLine = br.readLine()) != null) 
            {
                lastLine = sCurrentLine;
            }
            
            String a[] = lastLine.split("\t");
            DefaultTableModel demoTableModel = (DefaultTableModel)demoTable.getModel();
            for(int i=2; i<=5; i++){
                demoTableModel.setValueAt(a[i], i-2, count+1);
            }

        }
        finally{
            br.close();
        }
        
    }
    
    /* Call your algorithm from the gui here */
    public void callAlgorithm(String obj1, String obj, int count, int is_demo){
        
        if(obj == "Codos"){
        codos codosObj = new codos();
        try {   
                if(obj1 == "Demo"){
                    codosObj.runCodos(txtEx2.getText(), txtPrecision.getText(), txtTarget.getText(), "./stat/Codos/Codos_Demo.txt");
                    TimeUnit.MILLISECONDS.sleep(1000);
                    String s = "./image/Codos/CodosDot.png";
                    if(is_demo == 1){
                        loadStat("Codos", 0);
                        loadImage(s,count);  
                    }
                }
                else if(obj1 == "Comparison"){
                    codosObj.runCodos(txtEx2.getText(), txtPrecision.getText(), txtTarget.getText(), "./stat/Comparison/Comparison.txt");
                    TimeUnit.MILLISECONDS.sleep(1000);
                    String s = "./image/Codos/CodosDot.png";
                    loadStat("Codos", count);
                    loadImage(s,count);
                }
                else{
                    File f = new File("./stat/Codos/Codos_Stat.txt");

                    if(!f.exists()){
                        f.createNewFile();
                    }

                    FileWriter fw = new FileWriter(f, true);
                    DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                    codosObj.runCodos(txtEx2.getText(), txtPrecision.getText(), fw, tableModel);

                    fw.close();

                    jScrollPane1.getColumnHeader().setVisible(true);
                }
            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            } catch (InterruptedException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
        else if(obj == "Remia"){
            Remia remiaObj = new Remia();
            try {   
                    if(obj1 == "Demo"){
                        remiaObj.runRemia("1", txtTarget.getText(),txtPrecision.getText(), "Remia_Demo.txt");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Remia/RemiaDot.png";
                        if(is_demo == 1){
                            loadStat("Remia", 0);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        remiaObj.runRemia("1", txtTarget.getText(),txtPrecision.getText(), "./stat/Comparison/Comparison.txt");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Remia/RemiaDot.png";
                        loadStat("Remia", count);
                        loadImage(s,count);
                    }
                    else{
                        File f = new File("./stat/Remia/Remia_Stat.txt");

                        if(!f.exists()){
                            f.createNewFile();
                        }

                        FileWriter fw = new FileWriter(f, true);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        remiaObj.runRemia(txtPrecision.getText(), fw, tableModel);

                        fw.close();
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "ExRemia"){
            try {
                Remia remiaObj = new Remia();
                remiaObj.runRemia(txtEx2.getText(), txtTarget.getText(),txtPrecision.getText(), "ExRemia_Demo.txt");
                TimeUnit.MILLISECONDS.sleep(1000);
                String s = "./image/Remia/RemiaDot.png";
                if(is_demo == 1){
                    try {
                        loadStat("ExRemia", 0);
                        loadImage(s,count);
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(obj == "BitScanning"){
            BitScanning bsObj = new BitScanning();
            try {   
                    if(obj1 == "Demo"){
                        bsObj.runBitScan(txtTarget.getText(), txtPrecision.getText(),"./stat/BitScanning/BitScanning_Demo.txt");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/BitScanning/BitScanningDot.png";
                        if(is_demo == 1){
                            loadStat("BitScanning", 0);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        bsObj.runBitScan(txtTarget.getText(), txtPrecision.getText(),"./stat/Comparison/Comparison.txt");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/BitScanning/BitScanningDot.png";
                        loadStat("BitScanning", count);
                        loadImage(s,count);
                    }
                    else{
                        File f = new File("./stat/BitScanning/BitScanning_Stat.txt");

                        if(!f.exists()){
                            f.createNewFile();
                        }

                        FileWriter fw = new FileWriter(f, true);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        bsObj.runBitScan(txtPrecision.getText(), fw, tableModel);

                        fw.close();
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "DMRW"){
            Dmrw dmrwObj = new Dmrw();
            FileWriter fw ;
            try {   
                    if(obj1 == "Demo"){
                        fw = new FileWriter("./image/DMRW/dmrw.input");
                        fw.write(txtEx2.getText() + " " + txtEx1.getText() + " " + txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/DMRW/DMRWDot.png";
                        dmrwObj.dotToPng(s,obj);
                        //loadStat("DMRW");
                        if(is_demo == 1){
                            loadStat("DMRW", 0);
                            TimeUnit.MILLISECONDS.sleep(1000);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        fw = new FileWriter("./image/DMRW/dmrw.input");
                        fw.write("0" + " " + "1" + " " + txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/DMRW/DMRWDot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        loadStat("DMRW", count);
                        loadImage(s,count);
                    }
                    else{
                        fw = new FileWriter("./image/Gorma/gorma.input");
                        fw.write(txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(3000);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        FileReader fr = new FileReader("./stat/Gorma/Gorma_Stat.txt");
                        String sCurrentLine;
                        BufferedReader br = new BufferedReader(fr);
                        while ((sCurrentLine = br.readLine()) != null) {
                            String[] sArray = sCurrentLine.split("\t");
                            Object[] ob = new Object[sArray.length];
                            for(int i=0; i< sArray.length; i++){
                                ob[i] = Integer.parseInt(sArray[i]) ;
                            }
                            tableModel.addRow(ob);
			}
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
//                    else{
//                        File f = new File("./stat/BitScanning/BitScanning_Stat.txt");
//                        
//                        if(!f.exists()){
//                            f.createNewFile();
//                        }
//                        
//                        FileWriter fw = new FileWriter(f, true);
//                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
//                        bsObj.runBitScan(txtPrecision.getText(), fw, tableModel);
//                        
//                        fw.close();
//                        jScrollPane1.getColumnHeader().setVisible(true);
//                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "IDMA"){
            Dmrw dmrwObj = new Dmrw();
            FileWriter fw ;
            try {   
                    if(obj1 == "Demo"){
                        fw = new FileWriter("./image/IDMA/idma.input");
                        fw.write(txtEx2.getText() + " " + txtEx1.getText() + " " + txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(1000);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/IDMA/IDMADot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        //loadStat("DMRW");
                        if(is_demo == 1){
                            loadStat("IDMA", 0);
                            TimeUnit.MILLISECONDS.sleep(1000);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        fw = new FileWriter("./image/IDMA/idma.input");
                        fw.write("0" + " " + "1" + " " + txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/IDMA/IDMADot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        loadStat("IDMA", count);
                        loadImage(s,count);
                    }
                    else{
                        fw = new FileWriter("./image/Gorma/gorma.input");
                        fw.write(txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(3000);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        FileReader fr = new FileReader("./stat/Gorma/Gorma_Stat.txt");
                        String sCurrentLine;
                        BufferedReader br = new BufferedReader(fr);
                        while ((sCurrentLine = br.readLine()) != null) {
                            String[] sArray = sCurrentLine.split("\t");
                            Object[] ob = new Object[sArray.length];
                            for(int i=0; i< sArray.length; i++){
                                ob[i] = Integer.parseInt(sArray[i]) ;
                            }
                            tableModel.addRow(ob);
			}
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
//                    else{
//                        File f = new File("./stat/BitScanning/BitScanning_Stat.txt");
//                        
//                        if(!f.exists()){
//                            f.createNewFile();
//                        }
//                        
//                        FileWriter fw = new FileWriter(f, true);
//                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
//                        bsObj.runBitScan(txtPrecision.getText(), fw, tableModel);
//                        
//                        fw.close();
//                        jScrollPane1.getColumnHeader().setVisible(true);
//                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "Minmix"){
            Dmrw dmrwObj = new Dmrw();
            FileWriter fw ;
            try {   
                    if(obj1 == "Demo"){
                        fw = new FileWriter("./image/Minmix/minmix.input");
                        fw.write(txtEx2.getText() + " " + txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(1000);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Minmix/MinmixDot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        //loadStat("DMRW");
                        if(is_demo == 1){
                            loadStat("Minmix", 0);
                            TimeUnit.MILLISECONDS.sleep(1000);
                            loadImage(s,count);  
                        }
                        
                    }
                    else if(obj1 == "Comparison"){
                        fw = new FileWriter("./image/Minmix/minmix.input");
                        fw.write(txtEx2.getText() + " " + txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Minmix/MinmixDot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        loadStat("Minmix", count);
                        loadImage(s,count);
                    }
                    else{
                        fw = new FileWriter("./image/Minmix/minmix.input");
                        fw.write(txtEx2.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(3000);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        FileReader fr = new FileReader("./stat/Minmix/Minmix_Stat.txt");
                        String sCurrentLine;
                        BufferedReader br = new BufferedReader(fr);
                        while ((sCurrentLine = br.readLine()) != null) {
                            String[] sArray = sCurrentLine.split("\t");
                            Object[] ob = new Object[sArray.length];
                            for(int i=0; i< sArray.length; i++){
                                if(i == 1 || i == 3){
                                    ob[i] = sArray[i] ;
                                }
                                else{
                                    ob[i] = Integer.parseInt(sArray[i]) ;
                                }
                            }
                            tableModel.addRow(ob);
			}
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
//                    else{
//                        File f = new File("./stat/BitScanning/BitScanning_Stat.txt");
//                        
//                        if(!f.exists()){
//                            f.createNewFile();
//                        }
//                        
//                        FileWriter fw = new FileWriter(f, true);
//                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
//                        bsObj.runBitScan(txtPrecision.getText(), fw, tableModel);
//                        
//                        fw.close();
//                        jScrollPane1.getColumnHeader().setVisible(true);
//                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "Gorma"){
            Dmrw dmrwObj = new Dmrw();
            FileWriter fw ;
            try {   
                    if(obj1 == "Demo"){
                        fw = new FileWriter("./image/Gorma/gorma.input");
                        fw.write(txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Gorma/GormaDot.png";
                        dmrwObj.dotToPng(s,obj);
                        //loadStat("DMRW");
                        if(is_demo == 1){
                            loadStat("Gorma", 0);
                            TimeUnit.MILLISECONDS.sleep(1000);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        fw = new FileWriter("./image/Gorma/gorma.input");
                        fw.write(txtTarget.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Gorma/GormaDot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        loadStat("Gorma", count);
                        loadImage(s,count);
                    }
                    else{
                        fw = new FileWriter("./image/Gorma/gorma.input");
                        fw.write(txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(3000);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        FileReader fr = new FileReader("./stat/Gorma/Gorma_Stat.txt");
                        String sCurrentLine;
                        BufferedReader br = new BufferedReader(fr);
                        while ((sCurrentLine = br.readLine()) != null) {
                            String[] sArray = sCurrentLine.split("\t");
                            Object[] ob = new Object[sArray.length];
                            for(int i=0; i< sArray.length; i++){
                                ob[i] = Integer.parseInt(sArray[i]) ;
                            }
                            tableModel.addRow(ob);
			}
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
//                    else{
//                        File f = new File("./stat/BitScanning/BitScanning_Stat.txt");
//                        
//                        if(!f.exists()){
//                            f.createNewFile();
//                        }
//                        
//                        FileWriter fw = new FileWriter(f, true);
//                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
//                        bsObj.runBitScan(txtPrecision.getText(), fw, tableModel);
//                        
//                        fw.close();
//                        jScrollPane1.getColumnHeader().setVisible(true);
//                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "MTC"){
            Dmrw dmrwObj = new Dmrw();
            FileWriter fw ;
            try {   
                    if(obj1 == "Demo"){
                        fw = new FileWriter("./image/MTC/mtc.input");
                        fw.write(txtEx2.getText() + " " + txtPrecision.getText() + " " + txtTarget.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/MTC/MTCDot.png";
                        dmrwObj.dotToPng(s,obj);
                        if(is_demo == 1){
                            loadStat("DMRW", 0);
                            TimeUnit.MILLISECONDS.sleep(1000);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        fw = new FileWriter("./image/MTC/mtc.input");
                        fw.write(txtEx2.getText() + " " + txtPrecision.getText() + " " + txtTarget.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/MTC/MTCDot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        loadStat("MTC", count);
                        loadImage(s,count);
                    }
                    
//                    else{
//                        File f = new File("./stat/BitScanning/BitScanning_Stat.txt");
//                        
//                        if(!f.exists()){
//                            f.createNewFile();
//                        }
//                        
//                        FileWriter fw = new FileWriter(f, true);
//                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
//                        bsObj.runBitScan(txtPrecision.getText(), fw, tableModel);
//                        
//                        fw.close();
//                        jScrollPane1.getColumnHeader().setVisible(true);
//                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "Vospa"){
            vospa vospaObj = new vospa();
            try {   
                    if(obj1 == "Demo"){
                        vospaObj.runVospa(txtTarget.getText(), txtPrecision.getText(), txtEx2.getText(),"./stat/Vospa/Vospa_Demo.txt");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Vospa/VospaDot.png";
                        if(is_demo == 1){
                            loadStat("Vospa", 0);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        int denpow = Integer.parseInt(txtPrecision.getText());
                        int den = (int)Math.pow(2, denpow);
                        String stemp = ((Integer)den).toString();
                        System.out.println("stemp = " + stemp);
                        vospaObj.runVospa(txtTarget.getText()+"/"+stemp, "0.01", "4","./stat/Comparison/Comparison.txt");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/Vospa/VospaDot.png";
                        loadStat("Vospa", count);
                        loadImage(s,count);
                    }
                    else{
                        File f = new File("./stat/Vospa/Vospa_Stat.txt");

                        if(!f.exists()){
                            f.createNewFile();
                        }

                        FileWriter fw = new FileWriter(f, true);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        vospaObj.runVospa(txtPrecision.getText(),txtEx2.getText(), fw, tableModel);

                        fw.close();
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        else if(obj == "RMA"){
            Dmrw dmrwObj = new Dmrw();
            FileWriter fw ;
            try {   
                    if(obj1 == "Demo"){
                        fw = new FileWriter("./image/RMA/rma.input");
                        fw.write(txtEx2.getText() + " " + txtPrecision.getText() + " " + txtTarget.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/RMA/RMADot.png";
                        dmrwObj.dotToPng(s,obj);
                        if(is_demo == 1){
                            loadStat("RMA", 0);
                            TimeUnit.MILLISECONDS.sleep(1000);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        fw = new FileWriter("./image/RMA/rma.input");
                        fw.write(txtEx2.getText() + " " + txtPrecision.getText() + " " + txtTarget.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/RMA/RMADot.png";
                        dmrwObj.dotToPng(s,obj);
                        TimeUnit.MILLISECONDS.sleep(1000);
                        loadStat("RMA", count);
                        loadImage(s,count);
                    }
                    else{
                        fw = new FileWriter("./image/RMA/rma.input");
                        fw.write(txtEx2.getText() + " " + txtPrecision.getText());
                        fw.close();
                        TimeUnit.MILLISECONDS.sleep(100);
                        dmrwObj.runDmrw(obj,obj1);
                        TimeUnit.MILLISECONDS.sleep(3000);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        FileReader fr = new FileReader("./stat/RMA/RMA_Stat.txt");
                        String sCurrentLine;
                        BufferedReader br = new BufferedReader(fr);
                        while ((sCurrentLine = br.readLine()) != null) {
                            String[] sArray = sCurrentLine.split("\t");
                            Object[] ob = new Object[sArray.length];
                            for(int i=0; i< sArray.length; i++){
                                if(i == 1 || i == 3){
                                    ob[i] = sArray[i] ;
                                }
                                else{
                                    ob[i] = Integer.parseInt(sArray[i]) ;
                                }
                            }
                            tableModel.addRow(ob);
			}
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
                }catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        /*
        else if(obj == "XYZ"){
            XYZ xyzObj = new XYZ();
            try {   
                    if(obj1 == "Demo"){
                        xyzObj.runXYZ("String args[]");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/XYZ/XYZDot.png";
                        if(is_demo == 1){
                            loadStat("XYZ", 0);
                            loadImage(s,count);  
                        }
                    }
                    else if(obj1 == "Comparison"){
                        xyzObj.runXYZ("String args[]");
                        TimeUnit.MILLISECONDS.sleep(1000);
                        String s = "./image/XYZ/XYZDot.png";
                        loadStat("Remia", count);
                        loadImage(s,count);
                    }
                    else{
                        xyzObj.runXYZStat("String args[]");
                        TimeUnit.MILLISECONDS.sleep(3000);
                        DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                        FileReader fr = new FileReader("./stat/XYZ/XYZ_Stat.txt");
                        String sCurrentLine;
                        BufferedReader br = new BufferedReader(fr);
                        while ((sCurrentLine = br.readLine()) != null) {
                            String[] sArray = sCurrentLine.split("\t");
                            Object[] ob = new Object[sArray.length];
                            for(int i=0; i< sArray.length; i++){
                                ob[i] = sArray[i] ;
                            }
                            tableModel.addRow(ob);
			}
                        jScrollPane1.getColumnHeader().setVisible(true);
                    }
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
        }
        */

    }
    
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        statTable.getColumnModel().getColumn(6).setMinWidth(0);
        statTable.getColumnModel().getColumn(6).setMaxWidth(0);
        if(objective.getSelectedItem().toString() == "Stats"){
            String algo = algorithms.getSelectedItem().toString();
            File f = new File("./stat/" + algo + "/" + algo + "_Stat.txt");
            if(f.exists()){
                f.delete();
            }
        }
        
        if(mixingSpecs.getSelectedItem().toString()== "Mixing"){
            statTable.getColumnModel().getColumn(3).setMinWidth(0);
            statTable.getColumnModel().getColumn(3).setMaxWidth(0);
        }
        
        String algorithm = algorithms.getSelectedItem().toString();
        String algorithm1 = algorithms1.getSelectedItem().toString();
        String obj1 = objective.getSelectedItem().toString();
        
        if(obj1 == "Demo" || obj1 == "Stats"){
            demoTable.getColumnModel().getColumn(1).setHeaderValue(algorithm);
            demoTable.getTableHeader().repaint();
            callAlgorithm(obj1, algorithm, 0, 1);
            
        }
        else if(obj1 == "Best Algorithm"){
            int size = algorithms.getItemCount();
            String weight[] = txtEx1.getText().split(" ");
            double wReactant,wBuffer,wWaste,wOperation;
            wReactant = Double.parseDouble(weight[0]);
            wBuffer = Double.parseDouble(weight[1]);
            wWaste = Double.parseDouble(weight[2]);
            wOperation = Double.parseDouble(weight[3]);
            System.out.println("size = " + size);
            for(int i=1;i<size;i++){
                if(i!=2){
                    callAlgorithm("Demo", algorithms.getItemAt(i).toString(), 0, 0);
                    String algo = algorithms.getItemAt(i).toString();
                    BufferedReader br = null;
                    try {
                        br = new BufferedReader(new FileReader("./stat/" + algo + "/" + algo + "_Demo.txt"));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String lastLine = "";
                    String sCurrentLine;
                    try {
                        while ((sCurrentLine = br.readLine()) != null)
                        {
                            lastLine = sCurrentLine;
                        }
                        br.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String a[] = lastLine.split("\t");
                    if(mixingSpecs.getSelectedItem().toString() == "Mixing"){
                        a[3] = "0";
                    }
                    double d = wReactant * (Double.parseDouble(a[2])) + wBuffer * (Double.parseDouble(a[3])) + wWaste * (Double.parseDouble(a[4])) + wOperation * (Double.parseDouble(a[5]));
                    if(d<fValue){
                        fValue = d;
                        bestAlgo = algo;
                    } 
                }

            }
            String s = "./image/" + bestAlgo + "/" + bestAlgo + "Dot.png";
            try {
                loadStat(bestAlgo, 0);
                TimeUnit.MILLISECONDS.sleep(1000);
            } catch (IOException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            loadImage(s,0);
            demoTable.getColumnModel().getColumn(1).setHeaderValue(bestAlgo);
            demoTable.getTableHeader().repaint();
        }
        else{
            demoTable.getColumnModel().getColumn(1).setHeaderValue(algorithm);
            demoTable.getColumnModel().getColumn(2).setHeaderValue(algorithm1);
            demoTable.getTableHeader().repaint();
            callAlgorithm(obj1, algorithm, 0, 0);
            callAlgorithm(obj1, algorithm1, 1, 0);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed
    
    private void objectiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectiveActionPerformed
        // TODO add your handling code here
        String s = "Demo - To get Demo of an algorithm\nStats - To generate Statistics file for an algorithm\nComparison - To Compare any two algorithms";
        String obj = objective.getSelectedItem().toString();
        algorithms1.setVisible(false);
        if(obj == "Stats"){
            jPanelStats.setVisible(false);
        }
        jLabel7.setVisible(false);
        
        if(obj == "Demo" || obj == "Comparison" || obj == "Best Algorithm"){
                jPanelStats.setVisible(true);
                if(obj == "Demo" || obj == "Best Algorithm"){
                    demoTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {"Reactant", null, null},
                        {"Buffer", null, null},
                        {"Waste", null, null},
                        {"Operations", null, null}
                    },
                    new String [] {
                        "", "Algorithm"
                    }
                    ) {
                    boolean[] canEdit = new boolean [] {
                        false, true, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                    });
                }
                else if(obj == "Comparison"){
                    demoTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {"Reactant", null, null},
                        {"Buffer", null, null},
                        {"Waste", null, null},
                        {"Operations", null, null}
                    },
                    new String [] {
                        "", "Algorithm", "Algorithm 2"
                    }
                    ) {
                    boolean[] canEdit = new boolean [] {
                        false, true, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                    });
                    algorithms1.setVisible(true);
                    jLabel7.setVisible(true);
                }
        }
        //architecture.removeAllItems();
        architecture.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        architecture.addItem("CMFB");
        architecture.addItem("DMFB");
        architecture.addItem("PMD");
        architecture.addItem("MEDA");
        architecture.setVisible(true);
    }//GEN-LAST:event_objectiveActionPerformed

    private void architectureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_architectureActionPerformed
        // TODO add your handling code here:
        String obj = architecture.getSelectedItem().toString();
        mixingSpecs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        if(obj == "CMFB"){
            mixingSpecs.addItem("Dilution");
        }
        else if(obj == "DMFB"){
            mixingSpecs.addItem("Dilution");
            mixingSpecs.addItem("Mixing");
        }
        else if(obj == "PMD"){
        }
        else if(obj == "MEDA"){
        }
        mixingSpecs.setVisible(true);
    }//GEN-LAST:event_architectureActionPerformed

    private void mixingSpecsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mixingSpecsActionPerformed
        // TODO add your handling code here:
        String comboBox1 = architecture.getSelectedItem().toString();
        String obj = mixingSpecs.getSelectedItem().toString();
        algoClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        if(comboBox1 == "CMFB"){
            if(obj == "Dilution"){
                algoClass.addItem("SDST");
            }
        }
        else if(comboBox1 == "DMFB"){
            if(obj == "Dilution"){
                algoClass.addItem("SDST");
                algoClass.addItem("SDMT");
            }
            else if(obj == "Mixing"){
                algoClass.addItem("SDST");
                algoClass.addItem("SDMT");
            }
        }
        else if(comboBox1 == "PMD"){
            
        }
        else if(comboBox1 == "MEDA"){
            
        }
        algoClass.setVisible(true);
    }//GEN-LAST:event_mixingSpecsActionPerformed

    /* Add your algorithm in the dropdown as per the hierarchy here*/
    private void algoClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algoClassActionPerformed
        // TODO add your handling code here:
        String comboBox1 = architecture.getSelectedItem().toString();
        String comboBox2 = mixingSpecs.getSelectedItem().toString();
        String obj = algoClass.getSelectedItem().toString();
        algorithms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        
        
        if(comboBox1 == "CMFB"){
            if(comboBox2 == "Dilution"){
                if(obj == "SDST"){
                    algorithms.addItem("Vospa");
                    algorithms.addItem("BitScanning");
                }
            }
        }
        
        else if(comboBox1 == "DMFB"){
            if(comboBox2 == "Dilution"){
                if(obj == "SDST"){
                    algorithms.addItem("Remia");
                    algorithms.addItem("DMRW");
                    algorithms.addItem("IDMA");
                    algorithms.addItem("Gorma");
                    algorithms.addItem("BitScanning");
                }
                else if(obj == "SDMT"){
                    algorithms.addItem("ExRemia");
                    algorithms.addItem("MTC");
                }
                else if(obj == "MDST"){
                    
                }
                else if(obj == "MDMT"){
                    
                }
            }
            else if(comboBox2 == "Mixing"){
                if(obj == "SDST"){
                    //add dropdown
                    algorithms.addItem("Codos");
                    algorithms.addItem("Minmix");
                    algorithms.addItem("RMA");
                }
                else if(obj == "SDMT"){
                    
                }
                else if(obj == "MDST"){
                    
                }
                else if(obj == "MDMT"){
                    
                }
            }
        }
        algorithms.setVisible(true);
        String obj1 = objective.getSelectedItem().toString();
        if(obj1 == "Best Algorithm"){
            algorithms.disable();
            String algo = algorithms.getItemAt(1).toString();
            if(algo == "Codos"){
            lblEx2.setText("Number of Reactants");
            lblEx2.setVisible(true);
            txtEx2.setVisible(true);
            lblTarget.setText("Target Concentration");
            lblTarget.setVisible(true);
            txtTarget.setVisible(true);
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
            }
            else if(algo == "Remia"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "BitScanning"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "DMRW"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "IDMA"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "Minmix"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "Gorma"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "MTC"){
                lblEx2.setText("Number of Targets");
                lblEx2.setVisible(true);
                txtEx2.setVisible(true);
                lblTarget.setText("Target Concentrations");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "RMA"){
                lblEx2.setText("Number of Reactants");
                lblEx2.setVisible(true);
                txtEx2.setVisible(true);
                lblTarget.setText("Target Concentrations");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(algo == "Vospa"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                lblPrecision.setText("Tolerance");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            lblEx1.setText("Weightage");
            lblEx1.setVisible(true);
            txtEx1.setVisible(true);
        }
    }//GEN-LAST:event_algoClassActionPerformed

    /* Provide the input fields of the algorithm as per the module here */
    private void algorithmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmsActionPerformed
        // TODO add your handling code here:
        String obj = algorithms.getSelectedItem().toString();
        String obj1 = objective.getSelectedItem().toString();
        if(obj == "Codos"){
            lblEx2.setText("Number of Reactants");
            lblEx2.setVisible(true);
            txtEx2.setVisible(true);
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "Remia"){
            
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "ExRemia"){
            lblEx2.setText("Number of Reactants");
            lblEx2.setVisible(true);
            txtEx2.setVisible(true);
            lblTarget.setText("Target Concentration");
            lblTarget.setVisible(true);
            txtTarget.setVisible(true);
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        
        else if(obj == "BitScanning"){
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "DMRW"){
            if(obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            else if(obj1 == "Demo"){
                lblEx1.setText("Sample");
                lblEx2.setText("Buffer");
                lblEx1.setVisible(true);
                lblEx2.setVisible(true);
                txtEx1.setVisible(true);
                txtEx2.setVisible(true);
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "IDMA"){
            if(obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            else if(obj1 == "Demo"){
                lblEx1.setText("Sample");
                lblEx2.setText("Buffer");
                lblEx1.setVisible(true);
                lblEx2.setVisible(true);
                txtEx1.setVisible(true);
                txtEx2.setVisible(true);
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "Minmix"){
            lblEx2.setText("Number of Reactants");
            lblEx2.setVisible(true);
            txtEx2.setVisible(true);
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "Gorma"){
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "MTC"){
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblEx2.setText("Number of Targets");
                lblEx2.setVisible(true);
                txtEx2.setVisible(true);
                lblTarget.setText("Target Concentrations");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "RMA"){
            lblEx2.setText("Number of Reactants");
            lblEx2.setVisible(true);
            txtEx2.setVisible(true);
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblTarget.setText("Target Concentrations");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
            }
            lblPrecision.setText("Accuracy");
            lblPrecision.setVisible(true);
            txtPrecision.setVisible(true);
        }
        else if(obj == "Vospa"){
            
            if(obj1 == "Demo" || obj1 == "Comparison"){
                lblTarget.setText("Target Concentration");
                lblTarget.setVisible(true);
                txtTarget.setVisible(true);
                
                lblPrecision.setText("Tolerance");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            else if(obj1 == "Stats"){
                lblPrecision.setText("Accuracy");
                lblPrecision.setVisible(true);
                txtPrecision.setVisible(true);
            }
            lblEx2.setText("Segments");
            lblEx2.setVisible(true);
            txtEx2.setVisible(true);
        }
        algorithms1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        for(int i = 0;i<algorithms.getItemCount();i++){
            algorithms1.addItem(algorithms.getItemAt(i));
        }
        Object algo = algorithms.getSelectedItem();
        algorithms1.removeItem(algo);
        algorithms1.removeItemAt(0);
    }//GEN-LAST:event_algorithmsActionPerformed

    private void txtTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTargetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTargetActionPerformed

    private void txtPrecisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecisionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecisionActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Gui gui = new Gui();
        gui.setVisible(true);
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        String algo = algorithms.getSelectedItem().toString();
        String obj = objective.getSelectedItem().toString();
        try {   
                if(obj == "Demo"){
                    jPanelInfo.setVisible(true);
                    DefaultTableModel tableModel = (DefaultTableModel)statTable.getModel();
                    String sCurrentLine;
                    BufferedReader br = new BufferedReader(new FileReader("./stat/" + algo + "/" + algo + "_Demo.txt"));
                    while ((sCurrentLine = br.readLine()) != null) {
                        String[] sArray = sCurrentLine.split("\t");
                        Object[] ob = new Object[sArray.length];
                        for(int i=0; i< sArray.length; i++){
                            ob[i] = sArray[i] ;
                        }
                        tableModel.addRow(ob);
                    }
                    jScrollPane1.getColumnHeader().setVisible(true);
                    Desktop.getDesktop().open(new File("./stat/" + algo + "/" + algo + "_Demo.txt"));
                }
                else if(obj == "Stats"){
                    Desktop.getDesktop().open(new File("./stat/" + algo + "/" + algo + "_Stat.txt"));
                }
                
            } catch (IOException e1) {

                e1.printStackTrace();
            }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInActionPerformed
        // TODO add your handling code here:
        //JLabel lb = (JLabel)jPanelGraph.getComponent(0);
        width = (int)(1.1 * width);
        height = (int)(1.1 * height);
        lblImage.setSize(new Dimension(width,height));
        lblImage.setIcon(new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_SMOOTH)));
        lblImage.updateUI();
    }//GEN-LAST:event_zoomInActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed
        // TODO add your handling code here:
        width = (int)(0.9 * width);
        height = (int)(0.9 * height);
        lblImage.setSize(new Dimension(width,height));
        lblImage.setIcon(new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_SMOOTH)));
        lblImage.updateUI();
    }//GEN-LAST:event_zoomOutActionPerformed

    private void algorithms1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithms1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithms1ActionPerformed

    private void txtEx1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEx1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEx1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algoClass;
    private javax.swing.JComboBox<String> algorithms;
    private javax.swing.JComboBox<String> algorithms1;
    private javax.swing.JComboBox<String> architecture;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JTable demoTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelGraph;
    private javax.swing.JPanel jPanelInfo;
    private javax.swing.JPanel jPanelInput;
    private javax.swing.JPanel jPanelStats;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblEx1;
    private javax.swing.JLabel lblEx2;
    private javax.swing.JLabel lblPrecision;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JComboBox<String> mixingSpecs;
    private javax.swing.JComboBox<String> objective;
    private javax.swing.JTable statTable;
    private javax.swing.JTextField txtEx1;
    private javax.swing.JTextField txtEx2;
    private javax.swing.JTextField txtPrecision;
    private javax.swing.JTextField txtTarget;
    private javax.swing.JButton zoomIn;
    private javax.swing.JButton zoomOut;
    // End of variables declaration//GEN-END:variables
}
